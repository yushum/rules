name: Generate Custom Rules

on:
  workflow_dispatch: # Allow manual trigger
  schedule:
    # Runs daily at 23:00 UTC (7:00 AM Beijing Time / UTC+8)
    # Note: Cron times are UTC.
    - cron: '0 23 * * *'
  push:
    branches:
      - main # Or your default branch name (e.g., master)
    paths:
      # Trigger if custom rules, the script, or the workflow itself change
      - 'custom/**'
      - '.github/scripts/generate_rules.py'
      - '.github/workflows/generate-rules.yml'

jobs:
  build-rules:
    runs-on: ubuntu-latest
    # Grant permissions for the workflow to commit back to the repository
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # Specify a recent Python version
          cache: 'pip' # Cache pip dependencies

      - name: Install dependencies
        run: pip install requests

      - name: Generate rule lists
        run: python .github/scripts/generate_rules.py # Execute the script

      - name: Commit and push changes
        env:
          # Use the GitHub Actions bot user for commits
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          COMMIT_MSG: "Update rule lists [skip ci]" # Add [skip ci] to prevent triggering loops if workflow also runs on push
        run: |
          git config --global user.name "${GIT_AUTHOR_NAME}"
          git config --global user.email "${GIT_AUTHOR_EMAIL}"

          # Add all potentially generated files in the output directories
          git add shadowrocket/*.list mihomo/*.list

          # Check if there are staged changes
          if git diff --staged --quiet; then
            echo "No changes detected in generated rule lists."
            exit 0 # Exit successfully if no changes
          fi

          echo "Changes detected. Committing and pushing..."
          # Use UTC date in commit message for consistency
          git commit -m "${COMMIT_MSG} ($(date -u +'%Y-%m-%d %H:%M:%S %Z'))"

          # Retry push with backoff and pull --rebase before retrying
          retry_count=0
          max_retries=3
          push_success=false
          until ${push_success} || [ $retry_count -eq $max_retries ]; do
            retry_count=$((retry_count+1))
            # Attempt push
            if git push; then
              push_success=true
              echo "Changes pushed successfully."
            else
              echo "Push failed (Attempt ${retry_count}/${max_retries})..."
              if [ $retry_count -lt $max_retries ]; then
                 # Wait before retrying
                 sleep $((5 * retry_count))
                 echo "Pulling remote changes before retrying push..."
                 # Pull remote changes (rebase strategy to avoid merge commits)
                 if ! git pull --rebase --autostash; then
                    echo "Pull failed. Aborting push retry."
                    # Optional: Consider failing the job here or trying push one last time
                    break # Exit the loop if pull fails
                 fi
              fi
            fi
          done

          # Check if push ultimately failed
          if ! ${push_success}; then
            echo "Push failed after $max_retries retries."
            # Optional: Reset the commit locally if push failed?
            # git reset --hard HEAD~1
            exit 1 # Fail the workflow if push fails
          fi
